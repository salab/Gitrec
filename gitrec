#!/bin/sh

# variable definitions (seeds)
_BASE_DIR=".git_logs"
_COMMAND_HIST_FILE="command_hist"
_PATCH_DIR="patches"
_STATUS_DIR="statuses"
_REWRITE_DIR="rewrites"
_TREE_DIR="trees"
_REFLOG_DIR="reflogs"

# method definitions]
is_wd_under_git(){ _RET=`git rev-parse --is-inside-work-tree 2> /dev/null`; [ "$_RET" = "true" ] && return $? || return 1; }
mkdir_ifnot_exist(){ [ ! -d $1 ] && mkdir -p $1;}

echo_dotgit_path(){
if is_wd_under_git; then
  _GIT_PATH=`git rev-parse --show-toplevel`
  _GIT_PATH="${_GIT_PATH}/.git"
  echo ${_GIT_PATH}
else
  return 1;
fi
}

echo_rebase_dir_path(){
_GIT_PATH=`echo_dotgit_path`
echo "${_GIT_PATH}/rebase-merge"
}

is_in_rebasing(){
test -d `echo_rebase_dir_path`
_TEMP=$?
echo $_TEMP && return $_TEMP
}

peel_alias() {
_aliased=`git config --get-regexp "^alias\.$1\$" | sed -e "s/^alias\.$1 //"`
echo "${_aliased:-$1}"
}

# check pre-condition of running this
type git &> /dev/null && {
  unalias git &> /dev/null # if not this command is alised "git", peel alias.
  type git &> /dev/null && {
    if [ -z "$HOME" ]; then # do nothing
      exec git "$@"
    elif is_wd_under_git; then
      ### pre-execution phase
      _CUR_LOCATION=`pwd`
      _CUR_DATE_UTC=`perl -MTime::HiRes=gettimeofday -E 'my ($s, $ms) = gettimeofday; printf("%d%d\n", $s, ($ms / 1000))'`

      # verify HEAD
      git log &> /dev/null -n 0 && _CUR_BRANCH=`git rev-parse --abbrev-ref @`
      : ${_CUR_BRANCH:="EMPTY"}

      # retrieve from config with context
      _REMOTE_CUR_BRANCH=`git config --local --get branch.${_CUR_BRANCH}.remote`
      : ${_REMOTE_CUR_BRANCH:="EMPTY"} # set default value unless _REMOTE_URL

      # retrieve from config with context
      _REMOTE_URL=`git config --local --get remote.${_REMOTE_CUR_BRANCH}.url`
      : ${_REMOTE_URL:=`git config --local --list | grep -e "^remote\..*\.url=" | head -1 | sed -e "s/^remote\..*\.url=//"`} # find first
      : ${_REMOTE_URL:=$_CUR_LOCATION} # set default value unless _REMOTE_URL

      _REMOTE_URL_FIT_TO_FS=`echo ${_REMOTE_URL} | sed -e 's/[ \/:@]/\./g'`".d"

      _BASE_DIR="${HOME}/${_BASE_DIR}"
      _COMMAND_HIST_FILE="${_BASE_DIR}/${_COMMAND_HIST_FILE}"

      # setup
      _BASE_DIR="${_BASE_DIR}/${_REMOTE_URL_FIT_TO_FS}"
      mkdir_ifnot_exist "${_BASE_DIR}"
      mkdir_ifnot_exist "${_BASE_DIR}/${_PATCH_DIR}"
      mkdir_ifnot_exist "${_BASE_DIR}/${_REWRITE_DIR}"
      mkdir_ifnot_exist "${_BASE_DIR}/${_TREE_DIR}"
      mkdir_ifnot_exist "${_BASE_DIR}/${_STATUS_DIR}"
      mkdir_ifnot_exist "${_BASE_DIR}/${_REFLOG_DIR}"

      _LAST_EXECTUTED=`ls -1 "${_BASE_DIR}/${_REFLOG_DIR}" | tail -1 | sed -e "s/\..*//"`
      : ${_LAST_EXECTUTED:=$_CUR_DATE_UTC}

      # log two patches
      git diff > "${_BASE_DIR}/${_PATCH_DIR}/${_CUR_DATE_UTC}-pre.patch"
      git diff --staged > "${_BASE_DIR}/${_PATCH_DIR}/${_CUR_DATE_UTC}-staged-pre.patch"

      # log state
      git status > "${_BASE_DIR}/${_STATUS_DIR}/${_CUR_DATE_UTC}-pre.status"

      # log rewrite
      touch "${_BASE_DIR}/${_TREE_DIR}/${_CUR_DATE_UTC}-pre.tree"
      git log -n 0 &> /dev/null && git diff-tree -r --full-index HEAD > "${_BASE_DIR}/${_TREE_DIR}/${_CUR_DATE_UTC}-pre.tree"

      touch "${_BASE_DIR}/${_REWRITE_DIR}/${_CUR_DATE_UTC}-pre.rewrite"
      is_in_rebasing &> /dev/null && {
        _REBASE_DIR=`echo_rebase_dir_path`
        [ -f "${_REBASE_DIR}/rewritten-list" ] && cat "${_REBASE_DIR}/rewritten-list" > "${_BASE_DIR}/${_REWRITE_DIR}/${_CUR_DATE_UTC}-pre.rewrite"
      }

      _PRE_IS_IN_REBASING=`is_in_rebasing`

      _PRE_HEAD=`git rev-parse --verify HEAD 2> /dev/stdout`

      # executes handled. : not exec
      git "$@"
      _CMD_STATUS=$?

      _POST_HEAD=`git rev-parse --verify HEAD 2> /dev/stdout`
      _POST_IS_IN_REBASING=`is_in_rebasing`

      # log a command (%date, $exit_status, %repo_url, %remote, %branch, %commands and options)
      echo "${_CUR_DATE_UTC},${_CMD_STATUS},${_REMOTE_URL},${_REMOTE_CUR_BRANCH},${_CUR_BRANCH},${_PRE_IS_IN_REBASING},${_POST_IS_IN_REBASING},${_PRE_HEAD},${_POST_HEAD},$@" >> "$_COMMAND_HIST_FILE"

      ### post-execution
      git diff > "${_BASE_DIR}/${_PATCH_DIR}/${_CUR_DATE_UTC}-post.patch"
      git diff --staged > "${_BASE_DIR}/${_PATCH_DIR}/${_CUR_DATE_UTC}-staged-post.patch"
      git status > "${_BASE_DIR}/${_STATUS_DIR}/${_CUR_DATE_UTC}-post.status"

      # create empty files
      touch "${_BASE_DIR}/${_TREE_DIR}/${_CUR_DATE_UTC}-post.tree"
      touch "${_BASE_DIR}/${_REFLOG_DIR}/${_CUR_DATE_UTC}.reflog"
      # overwrite if valid HEAD
      git log -n 0 &> /dev/null && git diff-tree -r --full-index HEAD > "${_BASE_DIR}/${_TREE_DIR}/${_CUR_DATE_UTC}-post.tree"
      git log -n 0 &> /dev/null && git log --walk-reflogs --since="${_LAST_EXECTUTED}" > "${_BASE_DIR}/${_REFLOG_DIR}/${_CUR_DATE_UTC}.reflog"

      touch "${_BASE_DIR}/${_REWRITE_DIR}/${_CUR_DATE_UTC}-post.rewrite"
      is_in_rebasing &> /dev/null && {
        _REBASE_DIR=`echo_rebase_dir_path`
        [ -f "${_REBASE_DIR}/rewritten-list" ] && cat "${_REBASE_DIR}/rewritten-list" > "${_BASE_DIR}/${_REWRITE_DIR}/${_CUR_DATE_UTC}-post.rewrite"+
      }


      exit ${_CMD_STATUS}
    else # For initializing flows or showing original error messages
      exec git "$@"
    fi
  }
}

echo "git not found."

